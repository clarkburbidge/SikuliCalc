Install Java 32 Bit

c:\>java -d32 -version
java version "1.8.0_45"
Java(TM) SE Runtime Environment (build 1.8.0_45-b15)

Install Python 2.7 32 Bit

c:\>python
Python 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)] on win32

Install Jython

c:\>jython
Jython 2.7.0 (default:9987c746f838, Apr 29 2015, 02:25:11)
[Java HotSpot(TM) Client VM (Oracle Corporation)] on java1.8.0_45

Install with pip

c:\>pybot --version
Robot Framework 2.8.7 (Python 2.7.10 on win32)

Install from source via Jython

c:\>jybot --version
Robot Framework 2.9.dev20150605 (Jython 2.7.0 on java1.8.0_45)

PATH = C:\Python27\;C:\Python27\Scripts;C:\jython2.7.0;C:\jython2.7.0\bin\
SIKULI_HOME = C:\SikuliX\
_____________________________________
Command

c:\RobotFramework\SikuliCalc>jybottest.bat SikuliCalc.robot
_____________________________________
Folders

C:\SikuliX
C:\SikuliX\sikulixapi.jar
C:\RobotFramework\SikuliCalc
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli\btn2.png
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli\btnC.png
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli\btnEqual.png
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli\btnExp.png
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli\btnPlus.png
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli\calc.html
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli\calc.py
C:\RobotFramework\SikuliCalc\SikuliCalc.sikuli\CalcApp.png
_____________________________________
jybottest.bat

@echo off

set sikulix_jar=C:\SikuliX\sikulixapi.jar

set CLASSPATH=%sikulix_jar%
set JYTHONPATH=%sikulix_jar%/Lib

jybot --pythonpath=SikuliCalc.sikuli ^
      --outputdir=results ^
      --loglevel=TRACE ^
      %*
_____________________________________
calc.robot

***Settings***
Library  calc.Calculator  WITH NAME  Calculator

***Test Cases***
Verify that 2 + 2 = 4
	Start App
	Verify App
	Perform Action  2  +  2
	Verify Result  4

Verify that 2 + 2 = 5
	Start App
	Verify App
	Perform Action  2  +  2
	Verify Result  5

Click on non-existent button "Exp"
	Start App
	Verify App
	Perform Action  2  exp  2
	Verify Result  2
____________________________________
calc.py

# -*- coding: utf-8 -*-
from __future__ import with_statement

# IMPORTANT: python level import - don´t mix it with java level imports of Sikuli classes
# like from org.sikuli.script import Region
# For more details go here: https://answers.launchpad.net/sikuli/+question/261129
from sikuli import *

setBundlePath("calc.sikuli")

s = Screen()

class Calculator(object):

	def __init__(self):
		self.appCoordinates = (0, 0, 1024, 768)

	def startApp(self):
		calcApp = App("Rechner")
		if not calcApp.window():
				App.open("calc.exe")
				s.wait(2)
		calcApp.focus()
		s.wait(1)

	def verifyApp(self):
		# check application
		if s.exists("CalcApp.png"):
			print("PASS: Calculator window appeared")
		else:
			print("FAIL: No calculator window")

	def performAction(self, *args):
		# get application region
		s.find("CalcApp.png")

		match = s.getLastMatch()
		self.appCoordinates = (match.getX(), match.getY(), match.getW(), match.getH())
		appRegion = Region(*self.appCoordinates)

		# rewrite action
		action = args[1]
		if args[1] == '+':
			action = 'Plus'
		elif args[1] == 'exp':
			action = 'Exp'

		# with appRegion:
		s.click("btnC.png")

		s.click( "btn%s.png" % (args[0],) )
		s.click( "btn%s.png" % (action,) )
		s.click( "btn%s.png" % (args[2],) )

		s.click("btnEqual.png")

	def verifyResult(self, *args):
		expected_result = str(eval(''.join(args)))
		actual_result = self.getResultFromClipboard()

		#verification
		print expected_result
		print actual_result
		if actual_result == expected_result:
			print("PASS: Action performed correctly and result equals %s" % expected_result)
		else:
			print("FAIL: Actual result '%s' is not equal to expected result '%s'" % (actual_result, expected_result))

	def getResultFromClipboard(self):
		type('c', KEY_CTRL)
		return str(Env.getClipboard())

	def runTest(self):
		self.startApp()
		self.verifyApp()

		actions = '2+2'
		self.performAction(*actions)
		self.verifyResult(*actions)

if __name__ == "__main__":
	calc = Calculator()
	calc.runTest()




